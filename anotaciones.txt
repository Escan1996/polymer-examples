Tipos de datos:
String, Boolean, Number, Object, Array

Binding:
[[]] o {{}}

Binding con ciertos atributos. En algunos atributos es necesario colocar el signo de pesos al final para que
funcione el binding
<div class$="[[]]">

Computed Property
Se utiliza para establecer el valor de una propiedad con base en el retorno de un valor.
position: {
        type: String,
        computed: 'getPosition(posX, posY)' //Si algun argumento cambia, el método se ejecuta de nuevo.
}

Computed Binding
<div class$="viewport [[isHamburgerActive(showHamburger)]]">
-Si no tiene argumentos, solo se ejecuta una vez.
-Si tiene argumentos y si alguno de ellos cambia, se ejecuta de nuevo.

Eventos:
on-click="miMetodo" --> Va sin parentesis

Dom Repeat
<template is="dom-repeat" items="[[arreglo]]" as="miAlias">

Dom If
<template is="dom-if" if="{{propiedad Boolean}}">

Obtener elemento seleccionado dentro de una iteracion con dom-repeat
e.model.get('alias/item.valor')

Modificar elemento seleccionado dentro de una iteracion con dom-repeat
e.model.set('alias/item.valor,nuevoValor)

Obtener el valor de una propiedad
this.get('nombreDeLaPropiedad')

Modificar el valor de una propiedad
this.set('nombreDeLaPropiedad',nuevoValor)

Arreglos como propiedades en Polymer
this.push
this.pop
this.splice
this.unshift
this.shift

Observers Simples (Con primitivos): 
Para estar al pendiente de los cambios en una propiedad
usuario: {
            type: String,
            value: 'Juan',
            observer: '_usuarioChanged'
}

_usuarioChanged(newValue, oldValue) {
  console.log('Observer simple:', 'Nuevo valor: ' + newValue, 'Valor anterior: ' + oldValue);
}

Observers Simples (Con referencias de objetos o arreglos)
Para estar al pendiente de los cambios en las referencias
  gatos: {
            type: Array,
            value: [
              'michi1',
              'michi2',
              'michi3'
            ],
            observer: '_gatosObserver'
  },
this.set('gatos', [...nuevoArreglo]); //Si detecta el cambio porque se asigna una nueva referencias

Observer complejo con arreglos
Para estar al pendiente los cambios internos del arreglo, 
---PERO NO DEL CAMBIO EN SU REFERENCIA-
static get observers() {
return [
        Pendiente de todo, agregar, eliminar, modificar
        // 'gatosListChanged(gatos.*)'
        Pendiente unicamente del cambio en el tamño
        // 'gatosListChanged(gatos.length)'
        Pendiente de que elementos se agregan o eliminan
        'gatosListChanged(gatos.splices)'
]

Observer complejo con objetos
Para estar al pendiente del cambio en una sub propiedad.
static get observers() {
        return [
                'perroSubpropertyChanged(perro.*)'
        ]
}

Custom Properties
Para personalizar estilos del componente
:host {
display: block;
--map-height: 80vh;
}

#map {
height: var(--map-height);
}
